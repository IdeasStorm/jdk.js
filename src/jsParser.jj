/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(compiler)

import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import parser.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;  
import java.util.List;

public class compiler {
  public static void main(String args[]) throws ParseException, FileNotFoundException  {
    compileStream(new InputStreamReader(new FileInputStream("src//code.txt")));
    System.out.println("End Of Parser.");
  }
  
  public static void compileStream(InputStreamReader isr)  throws ParseException {
  	compiler parser = new compiler(isr);
    BlockStatement program = parser.start();
    StatementStatus status = program.execute(new ProgramContext(null));
    if (status.getType() != StatementStatus.Type.Normal)
    	throw new RuntimeException("SytaxError "+ status.getType() + " statement");
  }
}
PARSER_END(compiler)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|	<"//" (~["\n"])* "\n">		//skip single-line comments
|	<"/*"> : COMMENT			//skip multi-line comments
}



TOKEN : /* LOGIC OPERATORS */
{
	< DOUBLEQUOTE: "\"">	: DOUBLE_STRING
|	< SINGLEQUOTE:"'">		: SINGLE_STRING
| 	< AND: "&&" | "and" >
|	< OR: "||" | "or" >
|	< NOT: "!" | "not" >
}

TOKEN : /* SIGN COMPARE */
{
	< GT: ">" >
| 	< GTE: ">=" >
| 	< LT: "<" >
| 	< LTE: "<=" >
| 	< EQ: "==" >
}

TOKEN : /* PROTOTYE */
{
	< TYPE: "var" >
}

TOKEN : /* LOOPS */
{
	< FOR: "for" >
|	< WHILE: "while" >
|	< DO: "do" >
}

TOKEN : /* COMPARE */
{
	< IF: "if" >
|	< ELSE: "else" >
|	< TRUE: "true" >
|	< FALSE: "false" >
|	< SWITCH: "switch" >
|	< CASE: "case" >
|	< CONTINUE: "continue" >
|	< BREAK: "break" >
}

TOKEN : /* KEYWORDS */
{	
	< RETURN: "return" >
|	< FUNCTION: "function" >
|	< TRY: "try" >
|	< CATCH: "catch" >
|	< DELETE: "delete" >
|	< FINALLY: "finally" >
|	< IN: "in" >
|	< INSTANCEOF: "instanceof" >
|	< TYPEOF: "typeof" >
|	< NEW: "new" >
|	< THIS: "this" >
|	< THROW: "throw" >
| 	< VOID: "void" >
|	< WITH: "with" >
|	< NULL: "null" >
|	< UNDEFINED: "undefined" >
|	< SEMICOLON: ";" >
|   < _DEFAULT: "default" >
|	< DEBUG: "debug">
}

TOKEN : /* VARIABLE */
{
	< NUMBER: (["0" - "9"])+ | ( (["0" - "9"])* ("." (["0" - "9"])+) )>
|	< DIGIT: ["0" - "9"]>
|	< #CHARACTER: ["a"-"z", "A"-"Z","_","$"]>
|	< IDENTIFIER:  ( <CHARACTER> )  (( <DIGIT> ) | <CHARACTER>)* >
}

<COMMENT> SKIP :
{ 
	<~[]>
|	<"*/"> : DEFAULT
}

<DOUBLE_STRING> TOKEN:
{
  <DOUBLEENDQUOTE:"\""> : DEFAULT
| <DOUBLECHAR:~["\"","\\"]>
}

<DOUBLE_STRING> MORE:
{
  "\\" : ESC_STATE
}

<SINGLE_STRING> TOKEN:
{
  <SINGLEENDQUOTE:"'"> : DEFAULT
| <SINGLECHAR:~[]>
}

<ESC_STATE> TOKEN:
{
  <CNTRL_ESC:["\"","\\","/","b","f","n","r","t"]> : DOUBLE_STRING
}
void doubleString_getChar(StringBuilder builder):
{
  Token t;
}
{
  ( t = <DOUBLECHAR> | t = <CNTRL_ESC> )
  {
    if (t.image.length() < 2)
    {
      // CHAR
      builder.append(t.image.charAt(0));
    }
    else if (t.image.length() < 6)
    {
      // ESC
      char c = t.image.charAt(1);
      switch (c)
      {
        case 'b': builder.append((char) 8); break;
        case 'f': builder.append((char) 12); break;
        case 'n': builder.append((char) 10); break;
        case 'r': builder.append((char) 13); break;
        case 't': builder.append((char) 9); break;
        default: builder.append(c);
      }
    }
  }
}

void singleString_getChar(StringBuilder builder):
{
  Token t;
}
{
  ( t = <SINGLECHAR>  )
  {
      builder.append(t.image);
  }
}


//	BEGIN LITERALS
LiteralNode Literal(): {
	LiteralNode literal;
}
{
(
	literal = NullLiteral()
|	literal = BooleanLiteral()
|	literal = NumericLiteral()
|	literal = StringLiteral()
// | RegularExpressionLiteral() 

)
{return literal;}
}

LiteralNode NullLiteral(): {}
{
	<NULL>
	{
		return LiteralNode.createNullLiteral();
	}
}

LiteralNode BooleanLiteral(): 
{
	Token symbol;
}
{
	(
		symbol = <TRUE>
	|	symbol = <FALSE>
	)
	{
		return LiteralNode.createBooleanLiteral(symbol.image);
	}
}

LiteralNode NumericLiteral(): 
{
	Token num ;
}
{	
	num = <NUMBER>
	{ return LiteralNode.createNumberLiteral(num.image);}
}

/* Not Use Now
LiteralNode DecimalLiteral(): 
{
	Token num ;
}
{
		(	"." (DecimalDigits())? (ExponentPart())?
	|	(ExponentPart())?	
		)
	|	("." DecimalDigits() (ExponentPart())?)
} 
LiteralNode DecimalIntegerLiteral(): 
{
	Token num ;
}
{
	"0"  
|
	NonZeroDigit() (DecimalDigits())?
}

void NonZeroDigit(): {}
{
	<DIGIT>
}
void ExponentPart(): {}
{
	("e" | "E") SignedInteger()
}
void SignedInteger(): {}
{
		DecimalDigits()
	| 	"+" DecimalDigits()
	|	"-" DecimalDigits()
}
void DecimalDigit(): {}
{
	<DIGIT>
}
*/

LiteralNode DecimalDigits(): 
{
	Token num ; 
}
{
		num = <NUMBER>
		{ return LiteralNode.createNumberLiteral(num.image);}
}

LiteralNode StringLiteral(): 
{
	String s="";
}
{
	(	<DOUBLEQUOTE> (s=DoubleStringCharacters())? <DOUBLEENDQUOTE>
	|	<SINGLEQUOTE> (s=SingleStringCharacters())? <SINGLEENDQUOTE>
	)
	{
		return LiteralNode.createStringLiteral(s);
	}
}

String DoubleStringCharacters() : {
 StringBuilder builder = new StringBuilder();
}
{
	( doubleString_getChar(builder) )+
	{
		return builder.toString();
	}
}

String SingleStringCharacters() : 
{
	 StringBuilder builder = new StringBuilder();
}
{
	( singleString_getChar(builder) )+
	{
		return builder.toString();
	}
}
//		END LITERALS

// BEGIN PRIMARY EXPRESSION
ExpressionNode PrimaryExpression() :{
	ExpressionNode exp = null;
	Token identifier;
	LiteralNode literal;
}
{
(
	"this" {
		exp = VariableNode.thisNode;
	}
|	identifier = <IDENTIFIER> {
		exp =  new VariableNode(identifier.image);
	}
|	literal = Literal() {
		exp = literal;
	}
|	exp = ArrayLiteral() {
	}
|	exp = ObjectLiteral() {
	}
|	"(" exp = Expression() ")" {
	}
)
	{return exp;}
}

ArrayLiteral ArrayLiteral(): 
{
	List<ExpressionNode> exps = null,args = new ArrayList<ExpressionNode>();
	List<LiteralNode> temp  ;
}
{
	"["
(LOOKAHEAD(Elision())
	(	(temp = Elision() { args.addAll(temp);})? "]" )
	|	"]"
	|
	(LOOKAHEAD (ElementList() "]")
			( exps = ElementList() {args.addAll(exps);} "]" )
	|		(exps = ElementList() {args.addAll(exps);} (temp = Elision() {args.addAll(temp);})? "]")	 	
	)
)
	{return new ArrayLiteral(args);}
}

List<ExpressionNode> ElementList(): 
{
	List<ExpressionNode> args = new ArrayList<ExpressionNode>();
	List<LiteralNode> temp = null ;
	ExpressionNode exp = null;
}
{
(	(	(temp=Elision() {args.addAll(temp);} )? 
			exp = AssignmentExpression() {args.add(exp);}
	)
	(LOOKAHEAD(2) "," exp =AssignmentExpression() {args.add(exp);}
	)*
)
	{return args ; }
}

List<LiteralNode> Elision(): 
{
	List<LiteralNode> args = new ArrayList<LiteralNode>() ;
}
{
	(","
	{	args.add(LiteralNode.createUndefinedLiteral());}
	)+
	{return args ; }
}

ObjectLiteral ObjectLiteral(): 
{
	LinkedList<Pair> list =null; 
}
{
	"{" 
	(	"}"
		|
		list = PropertyNameAndValueList()  (",")? "}"
	)
	{return new ObjectLiteral(list);}
	{return null;}
}

LinkedList<Pair> PropertyNameAndValueList(): 
{
		LinkedList<Pair> values = new LinkedList<Pair>();
		Pair elem ;
}
{
	elem = PropertyAssignment() {values.add(elem); }
	(LOOKAHEAD(1)"," elem = PropertyAssignment()
	{	values.add(elem);	}
	)*
	{return values ;}
}

Pair PropertyAssignment(): 
{
	Pair elem ;
	ExpressionNode exp ;
	String literal ;
}
{
	literal = PropertyName() ":" exp = AssignmentExpression()
//TODO	
//|	<GET> PropertyName() "(" ")" "{" FunctionBody() "}" 
//|	<SET> PropertyName() "(" <IDENTIFIER> ")" "{" FunctionBody() "}" 
	{	elem = new Pair (literal,exp) ;
		return elem;}
}

String PropertyName(): 
{
	String str = "" ;
	Token num ,t;
}
{
(	( t = <IDENTIFIER> {str = t.image;} )
|
	(	<DOUBLEQUOTE> (str=DoubleStringCharacters())? <DOUBLEENDQUOTE>
	|	<SINGLEQUOTE> (str=SingleStringCharacters())? <SINGLEENDQUOTE>
	)
|	(num = <NUMBER> {str = num.image;} )
)
	{return str;}
}

// LEFT HAND SIDE EXPRESSION
ExpressionNode LeftHandSideExpression() :
{
	ExpressionNode exp = null ;
}
{
(LOOKAHEAD (CallExpression()) 
		exp = CallExpression()
|		exp = NewExpression()
)
{return exp ;}
}

ExpressionNode MemberExpression(): 
{
	ExpressionNode res = null ;
	List <ExpressionNode> args  = new ArrayList<ExpressionNode>() ;
	ExpressionNode temp ,mem = null,exp ;
	Token att ;
}
{
((
(	exp = PrimaryExpression() {res = exp ;}
|	exp = FunctionExpression() {res = exp ;} //{return new functionNode(exp)}
)
	( //TODO return ExpressionNode !!!
	("[" temp = Expression() "]"{	mem = new CallArrayExpression(res,temp);
									res = mem ; })
	|("." att = <IDENTIFIER> {	mem = new MemberExpression(res,att.image);
								res = mem ; })
	)*
)
|	( <NEW> exp = MemberExpression() args = Arguments() 
		{res = new InstantiationExpression(exp , args);}
	)
) {return res ;}
}

ExpressionNode NewExpression(): 
{
	ExpressionNode exp = null ;
}
{
(LOOKAHEAD (MemberExpression())
	(	exp = MemberExpression() )
|	(	<NEW> exp = MemberExpression() 
		{exp = new InstantiationExpression(exp , new ArrayList<ExpressionNode>());} 
	)
)
{return exp ;}
}

ExpressionNode CallExpression(): 
{
	ExpressionNode exp,res=null,mem = null;
	List<ExpressionNode> args = new ArrayList<ExpressionNode>();
	ExpressionNode temp ;
	List <ExpressionNode> templist ;
	Token att ;
}
{
	exp = MemberExpression() args = Arguments() {res = new FunctionCallExpression(exp,args);}
	(
//		( templist = Arguments() {args.addAll(templist); }) //	return new CallFunctionNode(exp,args) ;} )
	//	|
		( "[" temp = Expression() "]" {args.add(temp); }
			{	mem = new CallArrayExpression(res,temp);
				res = mem ; }
		)
		|
		( "." att = <IDENTIFIER>
			{	mem = new MemberExpression(res,att.image);
				res = mem ; }
		)
	)*
	{return res ;}
}

List<ExpressionNode> Arguments(): 
{
	List<ExpressionNode> args =new ArrayList<ExpressionNode>();
}
{
	"(" (args = ArgumentList())? ")"
	{return args ;}
}

List<ExpressionNode> ArgumentList(): 
{
	List<ExpressionNode> args = new ArrayList<ExpressionNode>();
	ExpressionNode exp ;
}
{
	exp = AssignmentExpression()
	{args.add(exp);} 
	(	"," exp = AssignmentExpression()
		{args.add(exp);} 
	)*
	{ return args ; }
}

ExpressionNode PostfixExpression(): 
{
	ExpressionNode exp ;
	ExpressionNode left; 
}
{
(	
	left = LeftHandSideExpression() { exp = left ;}
	(
	 ( "++" { exp = new OperatorNode(OperatorNode.OperatorType.PostIncrement,left , null) ;} ) 
	|( "--" { exp = new OperatorNode(OperatorNode.OperatorType.PostDecrement,left ,null) ;} )
	)?
)
	{return exp ;}
}

// Unary Expression
ExpressionNode UnaryExpression(): 
{
	ExpressionNode exp ;
	ExpressionNode right ;
}
{
(
	( exp = PostfixExpression() )
//	|	"typeof" UnaryExpression()
	|	( "++" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.PreIncrement,null , right) ;} )
	|	( "--" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.PreDecrement,null , right) ;} )
	|	( "+" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Add,null , right) ;}  )
	|	( "-" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Subtract,null , right) ;}  )
	|	( <NOT> right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Not,null , right) ;} )
)
	{return exp ;}
}

//	Multiplicative Expression
ExpressionNode MultiplicativeExpression(): 
{
	ExpressionNode exp,left,right =null; 
}
{
(
	( left = UnaryExpression() {exp = left ;}) 
	(
		( "*" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Multiply,left , right) ;  left = exp ; }) 
	|	(  "/" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Division,left , right) ;  left = exp ; } )
	|	( "%" right = UnaryExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Mod,left , right) ;  left = exp ; } ) 
	)*
)
	{return exp ;}
}

// Additive Expression
ExpressionNode AdditiveExpression():
{
	ExpressionNode exp,left,right = null ; 
}
{
(
	( left =MultiplicativeExpression() {exp = left ; })  
	(LOOKAHEAD(1)
		( "+" right = MultiplicativeExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Add, left , right) ;  left = exp ; }  ) 
	| 	( "-" right = MultiplicativeExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Subtract ,left , right) ;  left = exp ; }  ) 
	)*
)
	{return exp ;}
}

//TODO Shift Expression
ExpressionNode ShiftExpression(): 
{
	ExpressionNode exp = null ; 
}
{
(
	exp = AdditiveExpression() 
	(
	">>" AdditiveExpression() 
	| "<<" AdditiveExpression() 
	| ">>>" AdditiveExpression()
	)*
)
	{return exp ;}
}

//Relational Expression
ExpressionNode RelationalExpression(): 
{
	ExpressionNode exp,left,right = null ;
	OperatorNode.OperatorType op ; 
}
{
(
	( left = ShiftExpression() {exp = left ;})
	(LOOKAHEAD(1)
		(
			 "<" { op = OperatorNode.OperatorType.Less; }    
		|	 ">"  { op = OperatorNode.OperatorType.Greater; }
		|	 "<=" { op = OperatorNode.OperatorType.LessOrEqual; }
		|	 ">="  { op = OperatorNode.OperatorType.GreaterOrEqual; }
		|	 <INSTANCEOF>  { op = OperatorNode.OperatorType.INSTANCEOF; }
		|	 <IN> { op = OperatorNode.OperatorType.In; }
		)
		right = ShiftExpression() { exp = new OperatorNode(op, left , right) ;  left = exp ; }  
	)*
)
	{return exp ;}
}

//Equality Expression
ExpressionNode EqualityExpression(): 
{
	ExpressionNode exp,left,right ;
	OperatorNode.OperatorType op ;
}
{
(
	left = RelationalExpression() {exp = left;}  
	(LOOKAHEAD(1)
		 (
		  "=="  { op = OperatorNode.OperatorType.Equals; }
		  | "!="  { op = OperatorNode.OperatorType.NotEquals; }
//		  | "===" { op = OperatorNode.OperatorType.INSTANCEOF; }
//		  | "!=="  { op = OperatorNode.OperatorType.INSTANCEOF; }
		 )
		 right = RelationalExpression() { exp = new OperatorNode(op, left , right) ;  left = exp ; }
	)*
)
	{return exp ;}
}

//BitwiseAND Expression
ExpressionNode BitwiseANDExpression(): 
{
	ExpressionNode exp,left,right ;
}
{
(
	left = EqualityExpression() {exp = left ;} 
	(LOOKAHEAD(1)
		"&" right = EqualityExpression() { exp = new OperatorNode(OperatorNode.OperatorType.BitWiseAnd, left , right) ;  left = exp ; }
	)*
)
	{return exp ; }
}

//BitwiseXORExpression
ExpressionNode BitwiseXORExpression(): 
{
	ExpressionNode exp,left,right ;
}
{
(
	left = BitwiseANDExpression() {exp = left ;} 
	(LOOKAHEAD(1)
		"^" right = BitwiseANDExpression() { exp = new OperatorNode(OperatorNode.OperatorType.BitWiseXor, left , right) ;  left = exp ; }
	)*
)
	{return exp ;}
}

//bitwiseORExpression
ExpressionNode BitwiseORExpression() : 
{
	ExpressionNode exp,left,right ;
}
{
(
	left = BitwiseXORExpression() {exp = left ;}
	(LOOKAHEAD(1)
		"|" right = BitwiseXORExpression() { exp = new OperatorNode(OperatorNode.OperatorType.BitWiseOr, left , right) ;  left = exp ; }
	)*
)
	{return exp ;}
}

//BINARY LOGICAL OPERATORS
ExpressionNode LogicalANDExpression():
{
	ExpressionNode exp,left,right;
}
{
(
	left = BitwiseORExpression() {exp =left;} 
	(LOOKAHEAD(1)
		<AND> right = BitwiseORExpression() { exp = new OperatorNode(OperatorNode.OperatorType.And, left , right) ;  left = exp ; }
	)*
)
	{return exp ;}
}

ExpressionNode LogicalORExpression(): 
{
	ExpressionNode exp,right,left;
}
{
(
	left = LogicalANDExpression() {exp = left ; } 
	(LOOKAHEAD(1)
		<OR> right = LogicalANDExpression() { exp = new OperatorNode(OperatorNode.OperatorType.Or, left , right) ;  left = exp ; } 
	)*
)
	{return exp ;}
}

//Conditional Expression
ExpressionNode ConditionalExpression():
{
	ExpressionNode exp = null ;
}
{
(	//TODO deal with ? : !!?
	exp = LogicalORExpression() (LOOKAHEAD(1)"?" AssignmentExpression() ":" AssignmentExpression() )?
)
	{return exp ;}
}

ExpressionNode AssignmentExpression(): {
	ExpressionNode exp = null ;
	ExpressionNode left = null,right = null;
	OperatorNode.OperatorType op =null;
}
{

(LOOKAHEAD(LeftHandSideExpression() AssignmentOperator() )
	( left = LeftHandSideExpression() op = AssignmentOperator() right = AssignmentExpression() {return new OperatorNode (op,left,right) ;})
	|
	( exp = ConditionalExpression() { return exp;})
)
}

OperatorNode.OperatorType AssignmentOperator() : 
{
	OperatorNode.OperatorType op ;
	op = OperatorNode.OperatorType.Add ;
}
{
	 (
	 "*="  { op = OperatorNode.OperatorType.MultiplyBy ; }
	 | "/="  { op = OperatorNode.OperatorType.DivideBy ; }
	 | "%="  { op = OperatorNode.OperatorType.ModBy ; }
	 | "+="  { op = OperatorNode.OperatorType.AddBy ; }
	 | "-="  { op = OperatorNode.OperatorType.SubtractBy ; }
	 | "=" { op = OperatorNode.OperatorType.Assignment ; }
	 )
	 {
	 	return op ;
	 }
}

// Expression Finally !!
ExpressionNode Expression(): 
{
	List<ExpressionNode> exps = new ArrayList<ExpressionNode>();
	ExpressionNode exp =null;
}
{ //TODO return list of expression
	exp = AssignmentExpression()
	{exps.add(exp);} 
	(LOOKAHEAD(1)	"," exp = AssignmentExpression()
		{exps.add(exp);}
	)*
	{return new ExpressionsList(exps) ;}
}


//Statement
BlockStatement Block() : {
	LinkedList<Statement> statements;
}
{
	"{" statements = StatementList() "}"
	{
		return new BlockStatement(statements);
	}
}

LinkedList<Statement> StatementList() : {
	LinkedList<Statement> statements = new LinkedList<Statement>();
	Statement stmt;
}
{
	(stmt = Statement() { statements.add(stmt); })*
	{
		return statements;
	}
}

VariableStatement VariableStatement() : 
{
	LinkedList<Pair> values ;
}
{
	<TYPE> values = VariableDeclarationList() 
	(LOOKAHEAD(1) ";" { return new VariableStatement(values); }
	)?
	{throw new RuntimeException("missing ; in Variable Statement");} //status.getType()
}

LinkedList<Pair> VariableDeclarationList() : 
{
	//HashMap<String, ExpressionNode> values = new HashMap<String, ExpressionNode>();
	LinkedList<Pair>  values = new LinkedList<Pair>(); 
	Pair temp;
}
{
	temp = VariableDeclaration() {
		values.add(temp);
	}  
	( LOOKAHEAD(1) "," temp = VariableDeclaration(){
		values.add(temp);
		//values.add(new Pair(temp.getLeft(), temp.getRight()));
	})*
	
	{
		return values ;
	}	
}

Pair VariableDeclaration() : 
{
	Pair value;
	Token s ;
	ExpressionNode exp = LiteralNode.createUndefinedLiteral();
}
{
	s = <IDENTIFIER> (LOOKAHEAD(1) exp = Initialiser())?
	{
		value = new Pair(s.image,exp);
		return value;
	}
}

ExpressionNode Initialiser() : {
	ExpressionNode exp = null;
}
{
	"=" exp = AssignmentExpression()
	{return exp;}
}

Statement EmptyStatement() : {}
{	";"
	{	return null ;	}
}

ExpressionStatement ExpressionStatement() : 
{
	ExpressionStatement sta ;
	ExpressionNode exp ;
}
{
	// TODO [lookahead != {{, function}] 	
(	exp = Expression() 
	(LOOKAHEAD(1) ";" {return new ExpressionStatement(exp) ;} 
	)? 
		{throw new RuntimeException("missing ; in expression statement");} //status.getType()	
)
}

IfStatement IfStatement() : 
{
	IfStatement sta ;
	ExpressionNode exp ;
	Statement sta1 , sta2 =null;
}
{
	<IF> "(" exp = Expression() ")" sta1 = Statement() (LOOKAHEAD(1) <ELSE> sta2 = Statement())?
	{return new IfStatement(exp,sta1,sta2) ;}
}

Statement IterationStatement() : 
{
	Statement sta ;
}
{
(	sta = DoWhileStatement()
|	sta = WhileStatement()
|	sta = ForStatement()
)
	{return sta ; }
}

//TODO
Statement DoWhileStatement() : 
{
	Statement sta ;
	ExpressionNode exp ;
}
{
	<DO> sta = Statement() <WHILE> "(" exp = Expression() ")" ";"
	//{return new DoWhileStatement(sta,exp) ; }
	{return sta ; }
}

WhileStatement WhileStatement() : 
{
	Statement sta ;
	ExpressionNode exp ;
}
{
	<WHILE> "(" exp = Expression() ")" sta = Statement()
	{return new WhileStatement(exp , sta) ; }
}

ForStatement ForStatement() : 
{
	ExpressionNode exp1=null,exp2=null,exp3=null ;
	Statement body ;
	LinkedList<Pair> list ;
	VariableExpression varExp ;
	Token t ; 
}
{ //TODO
	<FOR> "(" 
	(LOOKAHEAD(<TYPE>)
	(<TYPE>
		 	( list = VariableDeclarationList() ";" (exp2 = Expression())? ";" (exp3 = Expression())? ")" body = Statement()
		 		{	varExp = new VariableExpression(list);
		 			return new ForStatement(varExp,exp2,exp3,body) ; } 
		 	)
		|	(t = <IDENTIFIER> "in" exp2 = Expression() ")" body = Statement()
	//			{return new ForStatement(t.image,exp2,body) ; } 
			)
	)
	|
//(LOOKAHEAD(LeftHandSideExpression() "in")
	//	( exp1 = LeftHandSideExpression() "in" exp2 = Expression() ")" body = Statement()
//			{return new ForStatement(exp1,exp2,body) ; }
		//)
	//|
		( (exp1 = Expression())? ";" (exp2 = Expression())? ";" (exp3 = Expression())? ")" body = Statement()
		{return new ForStatement(exp1,exp2,exp3,body); }
		)
	)
}


//Switch Statement
void SwitchStatement() : {}
{
	(<SWITCH> "(" Expression() ")")
	(	("{" (CaseClauses())? "}")
	|	("{" (CaseClauses())? DefaultClause() (CaseClauses())? "}")
	)	
}

void CaseClauses() : {}
{
	(CaseClause())+
}

void CaseClause() : {}
{
	<CASE> Expression() ":" (StatementList())?
}
 
void DefaultClause() : {}
{
	<_DEFAULT> ":" (StatementList())?
}


// FunctionDeclaration
Statement FunctionDeclaration() : 
{
	Token name =null;
	BlockStatement body = null ;
	List<String> params = new ArrayList<String>();
}
{
(	<FUNCTION> name = <IDENTIFIER> "(" ( params = FormalParameterList() )? ")" "{" body = FunctionBody() 
	(LOOKAHEAD(1) "}" {return new FunctionDeclarationStatement(name.image,params,body) ;})?
)
	{throw new RuntimeException("missing } in Function Declaration");} //status.getType()	
}

FunctionDeclarationExpression FunctionExpression() : 
{
	Token name = null ;
	BlockStatement body =null;
	List<String> params = new ArrayList<String>();
	String funcName = "";
}
{
(	<FUNCTION> (name = <IDENTIFIER>)? "(" 
	(params = FormalParameterList())? ")" 
	"{" body = FunctionBody() 
	(LOOKAHEAD(1) "}"
	{	
		if (name != null)
			funcName = name.image;
		return new FunctionDeclarationExpression(funcName,params,body) ; 
	}
	)?
	{throw new RuntimeException("missing } in Function Expression");} //status.getType()
)
}

List<String> FormalParameterList() : 
{
	List<String> params = new ArrayList();
	Token t ;
} 
{
	t = <IDENTIFIER>
	{params.add(t.image);} 
	(	"," t = <IDENTIFIER>
		{params.add(t.image);}
	)* 
	{ return params; }
}

BlockStatement FunctionBody() : 
{
	List<Statement> body = new ArrayList<Statement>();
}
{
	(body = SourceElements())?
	{	return new BlockStatement(body) ;}
}

List<Statement> SourceElements() : 
{
	List<Statement> elems = new ArrayList<Statement>() ;
	Statement temp ;
}
{
	(temp = SourceElement() 
		{	if (temp !=null)
			 elems.add(temp); }
	)+
	{
		return elems ;
	}
}

Statement SourceElement() : 
{
	Statement sta = null ;
}
{
( LOOKAHEAD (FunctionDeclaration())
	 sta = FunctionDeclaration() 
|	 sta = Statement()
)
	{return sta ;}
}

Statement ReturnStatement() : 
{
	Statement sta =null ;
	ExpressionNode exp =null;
} 
{
	<RETURN> (LOOKAHEAD(1)exp = Expression())? (LOOKAHEAD(1) ";"
	{	if (exp != null)
			return new ReturnStatement(exp);
		else
			return new ReturnStatement();
	}
	)?
	{throw new RuntimeException("missing ; in return statement");} //status.getType()
	//[no LineTerminator here]
}

Statement BreakStatement() : 
{
	Statement sta =null;
	Token t ;
}
{
(	<BREAK> (LOOKAHEAD(1) t = <IDENTIFIER>)? 
	( LOOKAHEAD(1) ";" { sta = new BreakStatement(); return sta ; } )?
)
	{throw new RuntimeException("missing ; in breake statement");} //status.getType()
	// [no LineTerminator here]
	//{return new BreakStatement (t.image) ;}
	 
}

Statement ContinueStatement() :
{
	Statement sta =null;
	Token t ;
}
{ 
(	<CONTINUE> (LOOKAHEAD(1) t = <IDENTIFIER>)? 
	( LOOKAHEAD(1) ";" 	{return new ContinueStatement() ;} )?
)
	{throw new RuntimeException("missing ; in continue statement");} //status.getType()
//[no LineTerminator here]
}

Statement DebugStatement(): {
	 ExpressionNode s = null;
}
{
(	<DEBUG> "(" (LOOKAHEAD(1) s = Expression())? ")" 
	(LOOKAHEAD(1) ";" 	{return new DebugStatement(s);} )?
	{throw new RuntimeException("missing ; in debug statement");} //status.getType()
)
}

Statement Statement() : 
{
	Statement sta = null;
}
{
(	(LOOKAHEAD(Block())	
		sta = Block()
	|	sta = ExpressionStatement()
	)
|	sta = VariableStatement()
|	sta = EmptyStatement()
|	sta = IfStatement()
|	sta = IterationStatement()
|	sta = ReturnStatement()
|	sta = BreakStatement()
|	sta = DebugStatement()
|	sta = ContinueStatement()
)
	{	return sta ;}
}
// Program
List<Statement> Program() :
{
	List<Statement> list = null;
}
{
	(list = SourceElements())? 
	{return list ;}
}

BlockStatement start() : {
	BlockStatement block;
	List<Statement> program;
}
{
	program = Program() (<EOF>)?
	{
		return new BlockStatement(program);
	}
}
